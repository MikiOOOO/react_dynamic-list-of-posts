{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","api/api.tsx","index.tsx"],"names":["PostsList","posts","onPostIdSelection","useState","selectedId","setSelectedId","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","onCommentAdd","name","setName","email","setEmail","body","setBody","isCommentBeingAdd","setIsCommentBeingAdd","isValidSubmission","setIsValidSubmission","isValidInput","inputType","onSubmit","event","preventDefault","newComment","then","finally","htmlFor","placeholder","value","onChange","target","PostDetails","comments","commentsError","areCommentsLoading","onCommentDelete","isFormDisplayed","setIsFormDisplayed","length","comment","href","UserSelector","users","onUserIdSelection","isDropdownActive","setIsDropdownActive","role","user","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","fetch","response","json","client","App","setUsers","selectedUserId","setSelectedUserId","setPosts","selectedPostId","setSelectedPostId","setComments","arePostsLoading","setArePostLoading","setAreCommentsLoading","postsError","setPostsError","setCommentsError","useEffect","searchedUrl","userPosts","catch","chosenPostComment","chosenPost","find","Boolean","postId","Math","max","com","addComment","prevComments","commentId","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5fe5192.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface PostListProps {\n  posts: Post[],\n  onPostIdSelection: (id: number) => void,\n}\n\nexport const PostsList: React.FC<PostListProps>\n= ({ posts, onPostIdSelection }) => {\n  const [selectedId, setSelectedId] = useState(0);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedId !== id,\n                    })}\n                    onClick={() => {\n                      onPostIdSelection(id);\n                      if (selectedId !== id) {\n                        setSelectedId(id);\n                      } else {\n                        setSelectedId(0);\n                        onPostIdSelection(0);\n                      }\n                    }}\n                  >\n                    {`${selectedId === id ? 'Close' : 'Open'}`}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { CommentData } from '../types/Comment';\n\ninterface NewCommentFormProps {\n  onCommentAdd: (comment: CommentData) => Promise<void>,\n}\nexport const NewCommentForm: React.FC<NewCommentFormProps>\n= ({ onCommentAdd }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isCommentBeingAdd, setIsCommentBeingAdd] = useState(false);\n  const [isValidSubmission, setIsValidSubmission] = useState(true);\n\n  const handleFormSubmission = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name && email && body) {\n      const newComment = {\n        name,\n        email,\n        body,\n      };\n\n      setIsCommentBeingAdd(true);\n      setIsValidSubmission(true);\n\n      onCommentAdd(newComment)\n        .then(() => setBody(' '))\n        .finally(() => setIsCommentBeingAdd(false));\n    } else {\n      setIsValidSubmission(false);\n    }\n  };\n\n  const handleFormClear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsValidSubmission(true);\n  };\n\n  const isValidInput = (inputType: string) => !isValidSubmission && !inputType;\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleFormSubmission}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isValidInput(name),\n            })}\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isValidInput(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {isValidInput(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isValidInput(email),\n            })}\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isValidInput(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {isValidInput(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isValidInput(body),\n            })}\n            value={body}\n            onChange={(event) => setBody(event.target.value)}\n          />\n        </div>\n\n        {isValidInput(body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isCommentBeingAdd,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleFormClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ninterface PostDetailsProps {\n  post: Post;\n  comments: Comment[];\n  commentsError: boolean;\n  areCommentsLoading: boolean;\n  onCommentAdd: (comment: CommentData) => Promise<void>,\n  onCommentDelete: (commentId: number) => void,\n}\n\nexport const PostDetails: React.FC<PostDetailsProps> = ({\n  post,\n  comments,\n  commentsError,\n  areCommentsLoading,\n  onCommentAdd,\n  onCommentDelete,\n}) => {\n  const [isFormDisplayed, setIsFormDisplayed] = useState(false);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">{`#${post.id}: ${post.title}`}</h2>\n\n        <p data-cy=\"PostBody\">{post.body}</p>\n      </div>\n\n      <div className=\"block\">\n        {areCommentsLoading ? (\n          <Loader />\n        ) : (\n          <>\n            {commentsError && (\n              <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                Something went wrong\n              </div>\n            )}\n\n            {!comments.length ? (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            ) : (\n              <>\n                <p className=\"title is-4\">Comments:</p>\n                {comments.map((comment) => {\n                  const {\n                    name, email, body, id,\n                  } = comment;\n\n                  return (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={id}\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                          {name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => onCommentDelete(id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {body}\n                      </div>\n                    </article>\n                  );\n                })}\n              </>\n            )}\n            {isFormDisplayed ? (\n              <NewCommentForm\n                onCommentAdd={onCommentAdd}\n              />\n            ) : (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsFormDisplayed(true)}\n              >\n                Write a comment\n              </button>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface UserSelectorProps {\n  users: User[],\n  onUserIdSelection: (id: number) => void,\n}\n\nexport const UserSelector: React.FC<UserSelectorProps>\n= ({ users, onUserIdSelection }) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(!isDropdownActive)}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => {\n            const { id, name } = user;\n\n            return (\n              <a\n                href={`#user-${id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  onUserIdSelection(id);\n                  setIsDropdownActive(false);\n                }}\n              >\n                {name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport {\n  getPosts, getUsers, getComments, addComment, deleteComment,\n} from './api/api';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { CommentData, Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [arePostsLoading, setArePostLoading] = useState(false);\n  const [areCommentsLoading, setAreCommentsLoading] = useState(false);\n  const [postsError, setPostsError] = useState(false);\n  const [commentsError, setCommentsError] = useState(false);\n\n  useEffect(() => {\n    getUsers('/users')\n      .then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      const searchedUrl = `/posts?userId=${selectedUserId}`;\n\n      setArePostLoading(true);\n      getPosts(searchedUrl)\n        .then((userPosts) => {\n          setPosts(userPosts);\n          setPostsError(false);\n        })\n        .catch(() => setPostsError(true))\n        .finally(() => setArePostLoading(false));\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      const searchedUrl = `/comments?postId=${selectedPostId}`;\n\n      setAreCommentsLoading(true);\n      getComments(searchedUrl)\n        .then((chosenPostComment) => {\n          setComments(chosenPostComment);\n          setCommentsError(false);\n        })\n        .catch(() => setCommentsError(true))\n        .finally(() => setAreCommentsLoading(false));\n    }\n  }, [selectedPostId]);\n\n  const handleUserIdSelection = (id: number) => {\n    setSelectedUserId(id);\n  };\n\n  const handlePostIdSelection = (id: number) => {\n    setSelectedPostId(id);\n  };\n\n  const handleCommentAdd = (comment: CommentData) => {\n    const newComment = {\n      ...comment,\n      postId: selectedPostId,\n      id: Math.max(...comments.map(com => com.id)) + 1,\n    };\n\n    return addComment('/comments', newComment)\n      .then(() => setComments(prevComments => (\n        [...prevComments, newComment]\n      )));\n  };\n\n  const handleCommentDelete = (commentId: number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n\n    const searchedUrl = `/comments/${commentId}`;\n\n    deleteComment(searchedUrl);\n  };\n\n  const chosenPost = posts.find(post => post.id === selectedPostId) || null;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  onUserIdSelection={handleUserIdSelection}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {arePostsLoading ? (\n                  <Loader />\n                ) : (\n                  <>\n                    {postsError && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {Boolean(posts.length) && (\n                      <PostsList\n                        posts={posts}\n                        onPostIdSelection={handlePostIdSelection}\n                      />\n                    )}\n\n                    {Boolean(!posts.length && selectedUserId) && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n                  </>\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': posts.length && selectedPostId },\n            )}\n          >\n\n            <div className=\"tile is-child box is-success \">\n              {chosenPost && (\n                <PostDetails\n                  post={chosenPost}\n                  comments={comments}\n                  commentsError={commentsError}\n                  areCommentsLoading={areCommentsLoading}\n                  onCommentAdd={handleCommentAdd}\n                  onCommentDelete={handleCommentDelete}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nexport const getUsers = (url: string) => {\n  return client.get<User[]>(url);\n};\n\nexport const getPosts = (url: string) => {\n  return client.get<Post[]>(url);\n};\n\nexport const getComments = (url: string) => {\n  return client.get<Comment[]>(url);\n};\n\nexport const addComment = (url: string, comment: Comment) => {\n  return client.post<Comment[]>(url, comment);\n};\n\nexport const deleteComment = (url: string) => {\n  return client.delete(url);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}